import { Jid } from './common';
import { MessagesType } from './message';
import { LastMessage } from '../types/threadApi';
interface UpdateOwnUserInfoParams {
	/** The nickname. */
	nickname?: string;
	/** The avatar url. */
	avatarurl?: string;
	/** The email. */
	mail?: string;
	/** The phone number. */
	phone?: string;
	/** Gender. You can define it with the following type: string, number, boolean. */
	gender?: string | number | boolean;
	/** Signature. */
	sign?: string;
	/** Birthday. */
	birth?: string;
	/** Extension. You can define it with the following type: string, number, boolean. */
	ext?: {
		[key: string]: string | number | boolean;
	};
}
/** Configurable fields. */
declare type ConfigurableKey =
	| 'nickname'
	| 'avatarurl'
	| 'mail'
	| 'phone'
	| 'gender'
	| 'sign'
	| 'birth'
	| 'ext';
interface RosterData {
	name: string;
	subscription: 'both';
	jid: Jid;
}
interface BaseUserInfo {
	/** Whether the current user is enabled. - `true`: Yes; - `false`: No.*/
	activated: boolean;
	/** The timestamp when the current user is created. */
	created: number;
	/** The time when the user information is last edited. */
	modified: number;
	/** The display name in the message push notification. */
	nickname: string;
	/** The user type. */
	type: string;
	/** The user ID. */
	username: string;
	/** The user uuid on the chat server. */
	uuid: string;
}
export interface PushInfo {
	/** The device ID, used to identify a device, which can be customized.*/
	device_id: string;
	/** The push token, which can be defined by yourself, is generally used to identify the same device. */
	device_token: string;
	/** The Push service appId, senderID for FCM, "appId+#+AppKey" for Vivo */
	notifier_name: string;
}
interface UploadTokenResult extends BaseUserInfo {
	/** The push info. */
	pushInfo: PushInfo[];
}
interface SessionInfo {
	/** The conversation ID. */
	channel_id: string;
	/** The content of the last message.*/
	meta: {
		/** The message sender. */
		from: string;
		/** The message ID. */
		id: string;
		/** The message content. */
		payload: string;
		/** The time when the message is received. */
		timestamp: number;
		/** The message recipient. */
		to: string;
	};
	/** The number of unread messages. */
	unread_num: number;
}
interface conversationList {
	/** The conversation ID. */
	channel_id: string;
	/** Overview of the latest news. */
	lastMessage: LastMessage;
	/** The number of unread messages. */
	unread_num: number;
}
interface DeleteSessionResult {
	/** The result of request. */
	result: 'ok';
}
interface SendMsgResult {
	/** The message local ID. */
	localMsgId: string;
	/** The ID of the message on the server. */
	serverMsgId: string;
}
interface HistoryMessages {
	/** 游标。如果数据还有下一页，该方法的返回值会包含此字段，传递此字段可获取下一页的数据，为 '' 时获取第一页数据 */
	cursor?: string;
	/** The Historical messages. */
	messages: MessagesType[];
}
interface ContactRelationshipMsg {
	/** The message type, subscribe: request a contact, unsubscribed: cancel or refuse to add contact, subscribed: added contact successfully. */
	type: 'subscribe' | 'unsubscribed' | 'subscribed';
	/** The message receiver. */
	to: string;
	/** The message sender. */
	from: string;
	/** Reason. */
	status?: string;
}
export type {
	UploadTokenResult,
	SessionInfo,
	conversationList,
	BaseUserInfo,
	DeleteSessionResult,
	SendMsgResult,
	ContactRelationshipMsg,
};
export type {
	RosterData,
	UpdateOwnUserInfoParams,
	ConfigurableKey,
	HistoryMessages,
};
