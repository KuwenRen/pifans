import {
	TextMsgBody,
	DeliveryMsgBody,
	ChannelMsgBody,
	CmdMsgBody,
	CustomMsgBody,
	ImgMsgBody,
	LocationMsgBody,
	AudioMsgBody,
	VideoMsgBody,
	FileMsgBody,
	ReceivedMsgBody,
	ReadMsgBody,
	RecallMsgBody,
	ContactMsgBody,
} from './message';
import { PresenceMsg, ThreadMultiDeviceInfo } from './engineCore';
import { ErrorEvent } from './error';
import { PresenceType } from './presenceApi';
import { ReactionMessage } from './reactionApi';
import { ThreadChangeInfo } from './threadApi';
import { EventData } from './common';
export declare type OnPresenceMsgType =
	| 'rmChatRoomMute'
	| 'rmGroupMute'
	| 'muteChatRoom'
	| 'muteGroup'
	| 'rmUserFromChatRoomWhiteList'
	| 'rmUserFromGroupWhiteList'
	| 'addUserToChatRoomWhiteList'
	| 'addUserToGroupWhiteList'
	| 'deleteFile'
	| 'uploadFile'
	| 'deleteAnnouncement'
	| 'updateAnnouncement'
	| 'removeMute'
	| 'addMute'
	| 'removeAdmin'
	| 'addAdmin'
	| 'changeOwner'
	| 'direct_joined'
	| 'leaveChatRoom'
	| 'leaveGroup'
	| 'memberJoinChatRoomSuccess'
	| 'memberJoinPublicGroupSuccess'
	| 'unblock'
	| 'block'
	| 'update'
	| 'allow'
	| 'ban'
	| 'getBlackList'
	| 'removedFromGroup'
	| 'invite_decline'
	| 'invite_accept'
	| 'invite'
	| 'joinPublicGroupDeclined'
	| 'joinPublicGroupSuccess'
	| 'joinGroupNotifications'
	| 'leave'
	| 'join'
	| 'deleteGroupChat'
	| 'subscribe'
	| 'unsubscribed'
	| 'subscribed'
	| 'disableGroup'
	| 'ableGroup';
interface OnPresenceMsg {
	type: OnPresenceMsgType;
	to: string;
	from: string;
	status: string;
	chatroom?: boolean;
	toJid?: string;
	fromJid?: string;
	gid?: string;
	owner?: string;
}
declare type Event =
	| 'onOpened'
	| 'onPresence'
	| 'onTextMessage'
	| 'onImageMessage'
	| 'onAudioMessage'
	| 'onVideoMessage'
	| 'onFileMessage'
	| 'onLocationMessage'
	| 'onCmdMessage'
	| 'onCustomMessage'
	| 'onReceivedMessage'
	| 'onDeliveredMessage'
	| 'onReadMessage'
	| 'onRecallMessage'
	| 'onChannelMessage'
	| 'onError'
	| 'onOffline'
	| 'onOnline'
	| 'onStatisticMessage'
	| 'onContactAgreed'
	| 'onContactRefuse'
	| 'onContactDeleted'
	| 'onContactAdded'
	| 'onTokenWillExpire'
	| 'onTokenExpired'
	| 'onContactInvited'
	| 'onConnected'
	| 'onDisconnected'
	| 'onGroupChange'
	| 'onChatroomChange'
	| 'onContactChange'
	| 'onPresenceStatusChange'
	| 'onReactionChange'
	| 'onChatThreadChange'
	| 'onMultiDeviceEvent'
	| 'onGroupEvent'
	| 'onChatroomEvent';
interface EventHandlerType {
	/** The callback to receive a text message. */
	onTextMessage?: (msg: TextMsgBody) => void;
	/** The callback to receive a image message. */
	onImageMessage?: (msg: ImgMsgBody) => void;
	/** The callback to receive a audio message. */
	onAudioMessage?: (msg: AudioMsgBody) => void;
	/** The callback to receive a video message. */
	onVideoMessage?: (msg: VideoMsgBody) => void;
	/** The callback to receive a file message. */
	onFileMessage?: (msg: FileMsgBody) => void;
	/** The callback to receive a location message. */
	onLocationMessage?: (msg: LocationMsgBody) => void;
	/** The callback to receive a command message. */
	onCmdMessage?: (msg: CmdMsgBody) => void;
	/** The callback to receive a custom message. */
	onCustomMessage?: (msg: CustomMsgBody) => void;
	/** The callback to receive a received ack. */
	onReceivedMessage?: (msg: ReceivedMsgBody) => void;
	/** The callback to receive a delivery ack. */
	onDeliveredMessage?: (msg: DeliveryMsgBody) => void;
	/** The callback to receive a read ack. */
	onReadMessage?: (msg: ReadMsgBody) => void;
	/** The callback to receive a recall message. */
	onRecallMessage?: (msg: RecallMsgBody) => void;
	/** The callback to receive a session read ack. */
	onChannelMessage?: (msg: ChannelMsgBody) => void;
	/** The callback to receive error. */
	onError?: (error: ErrorEvent) => void;
	/** The callback for network disconnection. */
	onOffline?: () => void;
	/** The callback for network connection. */
	onOnline?: () => void;
	/** The callback to receive a statistic message. */
	onStatisticMessage?: (msg: any) => void;
	/** The callback to accept contact request. */
	onContactAgreed?: (msg: ContactMsgBody) => void;
	/** The callback to refuse contact request. */
	onContactRefuse?: (msg: ContactMsgBody) => void;
	/** The callback to deleted a contact. */
	onContactDeleted?: (msg: ContactMsgBody) => void;
	/** The callback to added a contact. */
	onContactAdded?: (msg: ContactMsgBody) => void;
	/** The callback whose token is about to expire. */
	onTokenWillExpire?: () => void;
	/** The callback whose token has expired. */
	onTokenExpired?: () => void;
	/** The callback to contact request was received. */
	onContactInvited?: (msg: ContactMsgBody) => void;
	/** The callback for successful connection. */
	onConnected?: () => void;
	/** The callback for disconnected. */
	onDisconnected?: () => void;
	/** Occurs when the presence state of a subscribed user changes. */
	onPresenceStatusChange?: (msg: PresenceType[]) => void;
	/** The callback to receive a thread event. */
	onChatThreadChange?: (msg: ThreadChangeInfo) => void;
	/** The callback to receive a reaction message. */
	onReactionChange?: (msg: ReactionMessage) => void;
	/** The callback to receive a multi device event. */
	onMultiDeviceEvent?: (msg: ThreadMultiDeviceInfo) => void;
	/** The callback to receive a group event. */
	onGroupEvent?: (eventData: EventData) => void;
	/** The callback to receive a chatroom event. */
	onChatroomEvent?: (eventData: EventData) => void;
}

interface HandlerData {
	[key: string]: EventHandlerType;
}
declare class EventHandler {
	handlerData: HandlerData;
	addEventHandler: (
		eventHandlerId: string,
		eventHandler: EventHandlerType
	) => void;
	removeEventHandler: (eventHandlerId: string) => void;
	protected dispatch: (event: Event, ...args: any[]) => void;
}
export type {
	Event,
	EventHandlerType,
	HandlerData,
	EventHandler,
	OnPresenceMsg,
};
