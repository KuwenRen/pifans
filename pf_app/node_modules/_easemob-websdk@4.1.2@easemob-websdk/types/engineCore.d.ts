declare type OnPresenceMsgType =
	| 'rmChatRoomMute'
	| 'rmGroupMute'
	| 'muteChatRoom'
	| 'muteGroup'
	| 'rmUserFromChatRoomWhiteList'
	| 'rmUserFromGroupWhiteList'
	| 'addUserToChatRoomWhiteList'
	| 'addUserToGroupWhiteList'
	| 'deleteFile'
	| 'uploadFile'
	| 'deleteAnnouncement'
	| 'updateAnnouncement'
	| 'removeMute'
	| 'addMute'
	| 'removeAdmin'
	| 'addAdmin'
	| 'changeOwner'
	| 'direct_joined'
	| 'leaveChatRoom'
	| 'leaveGroup'
	| 'memberJoinChatRoomSuccess'
	| 'memberJoinPublicGroupSuccess'
	| 'unblock'
	| 'block'
	| 'update'
	| 'allow'
	| 'ban'
	| 'getBlackList'
	| 'removedFromGroup'
	| 'invite_decline'
	| 'invite_accept'
	| 'invite'
	| 'joinPublicGroupDeclined'
	| 'joinPublicGroupSuccess'
	| 'joinGroupNotifications'
	| 'leave'
	| 'join'
	| 'deleteGroupChat'
	| 'subscribe'
	| 'unsubscribed'
	| 'subscribed'
	| 'disableGroup'
	| 'ableGroup';
interface PresenceMsg {
	type: OnPresenceMsgType;
	to: string;
	from: string;
	status: string;
	chatroom?: boolean;
	toJid?: string;
	fromJid?: string;
	gid?: string;
	owner?: string;
	reason?: string;
	kicked?: string;
	groupName?: string;
}
interface SendMsgResult {
	/** The local ID of the message. */
	localMsgId: string;
	/** The ID of the message stored on the server. */
	serverMsgId: string;
}
declare type multiDeviceEventType =
	| 'chatThreadCreate'
	| 'chatThreadDestroy'
	| 'chatThreadJoin'
	| 'chatThreadLeave'
	| 'chatThreadNameUpdate';
interface ThreadMultiDeviceInfo {
	operation: multiDeviceEventType;
	chatThreadId?: string;
	chatThreadName?: string;
	parentId?: string;
}
export type {
	OnPresenceMsgType,
	PresenceMsg,
	SendMsgResult,
	ThreadMultiDeviceInfo,
	multiDeviceEventType,
};
